{"version":3,"sources":["node_modules/regenerator-runtime/runtime.js","src/user/newUser.js","src/timesheetForm.js","src/user/loginUser.js","src/app.js"],"names":["form","newUser","$","document","on","event","preventDefault","formData","username","val","password","ajax","type","url","contentType","data","JSON","stringify","response","empty","append","timesheetForm","visitResponse","done","visitId","optionsHtml","forEach","timesheetEl","console","log","_id","name","e","requestBody","time","notes","completed","window","alert","loginUser"],"mappings":";AAAA;AACA,AIAA;AJCA;AACA,AIAA;AJCA;AACA;AACA,AGNA,AFAA;ADOA,AIFAE,CAAC,CAAC,MAAD,CAAD,CAAUkB,MAAV,CAAiB,yBAAjB;AJGA,AGPA;AHQA;AACA,AEVA,IAAMpB,IAAI,wgEAAV;AFWA;AACA,AEsCA,IAAMqB,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AFrC5B,AEsCE;AFrCF,AEuCE,ADnDF,IAAMrB,IAAI,0iBAAV;ADaA,AEuCE,MAAMsB,aAAa,GAAGpB,CAAC,CAACS,IAAF,CAAO;AFtC/B,AEuCIC,ACpDJ,AFcA,ICsCIA,ADtCEX,ICsCE,EAAE,CDtCG,GAAG,CCqCe,QDrCzBA,OAAU,GAAM;ADAtB,AEuCIY,ACpDJ,AFcEX,EAAAA,CAAC,CCsCCW,ADtCAV,GCsCG,EAAE,GDtCN,CAAD,CAAYC,EAAZ,CAAe,QAAf,EAAyB,WAAzB;ADAF,AEoC+B,ACjD/B,AFaE,GCoCsB,EAGnBmB,IAHmB,CAGd,UAACC,OAAD,EAAa,0CDvCiB,iBAAOnB,KAAP;ADCxC,AEuCI,ACpDJ,AFYwC,QCwChCoB,WAAW,GAAG,EAAlB;AFtCJ,AEuCI,ACnDJ,AFUwC,IEVlCzB,IAAI,2qBAAV;AHaA,AEuCA,AD1CwC;ADIxC,AEuCA,ACrCA,AFNwC,IEMlCuC,SAAS,GAAG,SAAZA,SAAY,GAAM;AHDxB,AEuCA,ACrCErC,AFPsC,EEOtCA,CAAC,CAACC,QAAD,CAAD,CAAYC,EAAZ,CAAe,QAAf,EAAyB,aAAzB;AHDF,AEuCA,ACtCE,AFNEC,cAAAA,KAAK,CAACC,cAAN,GADoC,CAGpC,iCEIsC,iBAAOD,KAAP;AHA1C,AGA0C;AHC1C,AEsCGmB,ACvCuC,AFHhCjB,IC0CPiB,OAAO,CAACE,ED1CDnB,KC0CP,CAAgB,ED9CqB,GAInB,KC0CDoB,WAAD,EAAiB;AFrCpC,AEsCKC,ACxCqC,AFFpCpB,MC0CDoB,OAAO,CAACC,ED1CPrB,CC0CD,CAAY,MD1CH,EAAEN,CAAC,CAAC,IC0Cb,EAA4ByB,WAA5B,OD1CY,CAAD,CAA4BlB,GAA5B,EADK;ADMrB,AEsCMgB,ACzCoC,AFDpCf,MC0CAe,UD1CAf,CC0CW,OD1CH,EAAER,CAAC,CAAC,iBC0CoByB,OD1CrB,CAAD,CAA4BlB,EC0CK,CAACqB,AD1ClC,GC0CC,cAAwCH,WAAW,CAACI,IAApD,cAAX;AFrCN,AEsCK,AC1CqC,AFHrB,KC0ClB,UD9CqC;ADYxC,AEuCI7B,AC3CAG,AFRoC,ICmDpCH,CAAC,CAAC,QAAD,AC3CDG,CD2CA,CAAYe,GC3CP,CAACd,ED2CN,CAAmBmB,WAAnB,AC3CA,GADsC,CAGtC;AHGJ,AEuCG,ADpDqC,GCoChB,CAAtB,CAJ0B,CAsB1B;AFxCF,AGHUlB,AFX8B,cEW9BA,OFAmBL,CEJa,AFIZ,CAACS,EEAV,EFAQ,CAAO;ADIpC,AEwCET,AC3CIM,AFAEI,EC2CNV,CAAC,CAACC,QAAD,CAAD,CAAYC,EAAZ,AC3CII,AFAEI,CC2CS,GD3CL,EAAE,EC2CZ,AC3CY,ED2CY,AC3CVV,CAAC,CAAC,AFDkB,iBC4ClC,OC3Ce,CAAD,CAA4BO,GAA5B,EADK;AHKrB,AEuCE,AC1CIC,AFAEG,gBEAFH,AFAEG,GAAG,EAAE,GEAC,EAAEX,CAAC,CAAC,cFFkB,UEEnB,CAAD,CAA4BO,GAA5B,cD0C+B,iBAAOuB,CAAP;AFtC/C,AEsC+C,AC5C1B,AFGblB,eEPkC,CFOlCA,CEEJ,UFFe,EAAE,kBAHe;ADOpC,AEqC+C,ADxCvCC,gBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeV,QAAf;ADId,AEoC+C,AChDL,AFIN,eAAP,CAXW;ADoBxC,AEmC+C,AChDL;AHc1C,AEkC+C,AChDL,AFPF,qBEkBXL,CAAC,CAACS,IAAF,CAAO;AHIpC,AEkCIqB,ACrCIpB,AFRIM,cC6CRc,AD7CQd,CC6CP,CAACZ,ACrCEM,IAAI,EAAE,AFnB0B,MEkBJ,EDsChC,GAD2C,CAG3C;AFnCJ,AGHQC,AFFF,gBEEEA,GAAG,EAAE,kBAFuB;AHMpC,AEmCUoB,ACtCFnB,AFFFZ,cCwCI+B,ADxCJ/B,CAAC,CEECY,AFFA,MAAD,CAAD,CAAUK,CCoC+B,EClC5B,CDsCK,CCtCH,AFFf,GAnBkC,CAqBlC,cEH8B;AHOpC,AEmCMY,ACtCEhB,gBDsCFgB,ACtCEhB,IDsCE,ACtCE,EDsCAb,ACtCEc,CDsCD,CAAC,ECtCI,CAACC,IDsCN,CAAD,CAAWR,GAAX,ACtCE,CAAeF,CDqCL,OCrCV;AHId,AEmCM2B,AC3C8B,AFI9BhC,cAAAA,CEJuB,AFItB,CCuCDgC,ACtDoC,AFelC,ICuCE,EAAEhC,ADvCL,CCuCM,ADvCP,CCuCQ,ADvCEkB,MAAV,CCuCO,ADvCU,CCuCX,CAAWX,GAAX,EAFY,kBDrClB;ADKN,AEmCM0B,AD9DkC,gBC8DlCA,KAAK,EAAEjC,CAAC,CAAC,QAAD,CAAD,CAAYO,GAAZ,EAHW;AF/BxB,AEmCM2B,ACxDoC,AFPF,gBC+DlCA,SAAS,EAAElC,CAAC,qCAAD,CAAqCO,GAArC,EAJO;AF9BxB,AEmCMe,AC9CMN,cAAAA,ED8CNM,MCzDoC,CDyD7B,EAAEtB,CAAC,CAAC,QAAD,CAAD,CAAYO,GAAZ;AFlCf,AE6BwB,AClClB,AFzBkC,eCuDO;AFxB/C,AEmCAmB,ACxCM1B,AF1BkC,cCkExC0B,ACxCM1B,CAAC,CAAC,KDwCD,CAAC2B,ACxCD,CAAD,CAAUV,CDwChB,CAAY,GCxCN,GAnBoC,CAqBpC,SDsCN,EAA8Bc,WAA9B;AFlCA,AEoCA/B,ADpEwC,cCoExCA,CAAC,CAAC,aAAD,CAAD,CAAiBkB,MAAjB,CAAwBa,WAAxB,EAb+C,CAgB3C;AFtCJ,AGJM/B,AFLA,cEKAA,CAAC,CAAC,MAAD,CAAD,CAAUkB,MAAV,CAAiB,6BAAjB;AHKN,AEqB+C,AChDL,AFkBpClB,cAAAA,CAAC,CAAC,MAAD,CAAD,CAAUkB,MAAV,CAAiB,kCAAjB;ADUN,AEoB+C,AChDL,qBDiEflB,CAAC,CAACS,IAAF,CAAO;AFpClC,AEqCMC,ADzEkC,gBCyElCA,IAAI,EAAE,MADsB;AFnClC,AEqCMC,ACnEoC,AFPF,gBC0ElCA,GAAG,EAAE,8BAFuB;AFlClC,AEqCMC,ACpEoC,AFPF,gBC2ElCA,WAAW,EAAE,kBAHe;AFjClC,AEqCMC,ACrEoC,AFPF,gBC4ElCA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAegB,WAAf;AFpCZ,AEgCkC,ACzC5B,AF/BkC,eCwEb,CAjBoB;AFd/C,AGTM/B,AFhCkC,cEgClCA,CAAC,CAAC,MAAD,CAAD,CAAUkB,MAAV,CAAiB,wCAAjB;AHUN,AEa+C,ADvDP,KAAtC;AD2CF,AE6BUF,ACjEgC,cDiEhCA,QAjBqC;AFX/C,AEmCI,ACxEsC,AFPxC;AD6CF,AEmCImB,ACzEsC,AFPxC,cCgFEA,MAAM,CAACC,KAAP,CAAa,oBAAb;AFlCJ,AGvC0C,AFPxC;AD+CF,AEQ+C,AChDL,AFPxC;ADgDF,AEO+C,AChDL,AFqBxC,SAAOtC,IAAP;ADqBF,AEM+C,AChDL,AFsBzC,CA9BD,IEQE;AH2CF,AEK+C;AFJ/C,AEI+C,AChD7C,eFwBaC;ADqBf,AEG+C,AChD7C;AH8CF,AEE+C,AChD7C,KDgDA;AFDF,AG/CE;AHgDF,AEAE,ACpBA,SAAOD,IAAP;AHqBF,AEDE,ACnBD,CA9BD,EAgCA;AHmBA,AEFE;AFGF,AEHE,OAvB0B,CAmD1B;AFxBF,AGpBAE,CAAC,CAACC,QAAD,CAAD,CAAYC,EAAZ,CAAe,OAAf,EAAwB,oBAAxB,EAA8C,YAAM;AHqBpD,AEwBEF,AC5CA,ED4CAA,CAAC,CAACC,QAAD,CAAD,CAAYC,EAAZ,CAAe,OAAf,EAAwB,mBAAxB;AFvBF,AEuBE,AC3CAF,EAAAA,CAAC,CAAC,MAAD,CAAD,CAAUiB,KAAV,GAFkD,CAIlD,mDDyC6C,kBAAOa,CAAP;AFtB/C,AEsB+C;AFrB/C,AEqB+C,ACxC7C9B,EAAAA,CAAC,CAAC,MAAD,CAAD,CAAUkB,MAAV,CAAiB,uBAAjB;AHoBF,AEoB+C,ACvC9C,CAND;AH0BA,AEmB+C,eCrChCmB;AHmBf,AEkB+C;AFjB/C,AEkBIP,cAAAA,CAAC,CAAC1B,cAAF,GAD2C,CAG3C;AFnBJ;AACA,AEmBU2B,cAAAA,WAJqC,GAIvB;AFlBxB,AEmBMF,gBAAAA,IAAI,EAAE7B,CAAC,CAAC,OAAD,CAAD,CAAWO,GAAX,EADY;AFjBxB,AEmBMyB,gBAAAA,IAAI,EAAEhC,CAAC,CAAC,OAAD,CAAD,CAAWO,GAAX,EAFY;AFhBxB,AEmBM0B,gBAAAA,KAAK,EAAEjC,CAAC,CAAC,QAAD,CAAD,CAAYO,GAAZ,EAHW;AFfxB,AEmBM2B,gBAAAA,SAAS,EAAElC,CAAC,qCAAD,CAAqCO,GAArC,EAJO;AFdxB,AEmBMe,gBAAAA,OAAO,EAAEtB,CAAC,CAAC,QAAD,CAAD,CAAYO,GAAZ;AFlBf,AEawB,eAJuB,EAY3C;AFpBJ;AACA,AEO+C;AFN/C,AEM+C,qBAapBP,CAAC,CAACS,IAAF,CAAO;AFlBlC,AEmBMC,gBAAAA,IAAI,EAAE,OADsB;AFjBlC,AEmBMC,gBAAAA,GAAG,4CAAqCX,CAAC,CAAC,QAAD,CAAD,CAAYO,GAAZ,EAArC,CAFyB;AFhBlC,AEmBMK,gBAAAA,WAAW,EAAE,kBAHe;AFflC,AEmBMC,gBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAegB,WAAf;AFlBZ,AEckC,eAAP,CAboB;AFA/C;AACA,AED+C;AFE/C,AEWUf,cAAAA,QAbqC;AFG/C,AEiBI;AFhBJ,AEiBImB,cAAAA,MAAM,CAACC,KAAP,CAAa,oBAAb;AFhBJ;AACA,AEN+C;AFO/C,AEP+C;AFQ/C,AER+C;AFS/C,AET+C;AFU/C,AEV+C;AFW/C,AEX+C;AFY/C,AEZ+C,KAA7C;AFaF;AACA,AEdE;AFeF,AEfE;AFgBF,AEhBE;AFiBF,AEjBE,OApD0B,CA4E1B;AFNF;AACA,AEMEpC,EAAAA,CAAC,CAACC,QAAD,CAAD,CAAYC,EAAZ,CAAe,OAAf,EAAwB,mBAAxB;AFLF,AEKE,wEAA6C,kBAAO4B,CAAP;AFJ/C,AEI+C;AFH/C,AEG+C;AFF/C,AEE+C;AFD/C,AEC+C;AFA/C,AEA+C;AFC/C,AEAIA,cAAAA,CAAC,CAAC1B,cAAF,GAD2C,CAG3C;AFDJ;AACA,AEH+C;AFI/C,AEJ+C,qBAIpBJ,CAAC,CAACS,IAAF,CAAO;AFClC,AEAMC,gBAAAA,IAAI,EAAE,QADsB;AFElC,AEAMC,gBAAAA,GAAG,4CAAqCX,CAAC,CAAC,QAAD,CAAD,CAAYO,GAAZ,EAArC,CAFyB;AFGlC,AEAMK,gBAAAA,WAAW,EAAE;AFCnB,AEJkC,eAAP,CAJoB;AFS/C;AACA,AEV+C;AFW/C,AEPUI,cAAAA,QAJqC;AFY/C,AEFI;AFGJ,AEFImB,cAAAA,MAAM,CAACC,KAAP,CAAa,oBAAb;AFGJ;AACA,AEf+C;AFgB/C,AEhB+C;AFiB/C,AEjB+C;AFkB/C,AElB+C;AFmB/C,AEnB+C;AFoB/C,AEpB+C;AFqB/C,AErB+C,KAA7C;AFsBF;AACA,AEvBE;AFwBF,AExBE;AFyBF,AEzBE;AF0BF,AE1BE;AF2BF,AEbE,SAAOtC,IAAP;AFcF,AEbC,CA5FD;AF0GA;AACA,eEXeqB;AFYffile":"app.a6a4d504.js","sourceRoot":"..","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","import loginUser from \"./loginUser\";\n\nconst form = `\n  <form id=\"new-user\">\n  <h1>New Staff Registration</h1>\n    <div class=\"form-group\">\n      <label for=\"username\">Username</label>\n      <input type=\"text\" class=\"form-control\" placeholder=\"Please enter username\" name=\"username\">\n    </div>\n    <div class=\"form-group\">\n      <label for=\"password\">Password</label>\n      <input type=\"password\" class=\"form-control\" placeholder=\"Please enter password\" name=\"password\">\n    </div>\n    <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n  </form>\n`;\n\nconst newUser = () => {\n  $(document).on(\"submit\", \"#new-user\", async (event) => {\n    event.preventDefault();\n\n    // Extract user name and password from the form\n    const formData = {\n      username: $(\"input[name='username']\").val(),\n      password: $(\"input[name='password']\").val(),\n    };\n\n    try {\n      // Make a POST request to the server to create a new user\n      const response = await $.ajax({\n        type: \"POST\",\n        url: \"/api/users/register\",\n        contentType: \"application/json\",\n        data: JSON.stringify(formData),\n      });\n\n      // Clear form by calling empty function\n      $(\"body\").empty();\n\n      // Append the login form so user can now login\n      $(\"body\").append(loginUser());\n    } catch (err) {\n      // Inform user that their login could not be created if there's an error\n      $(\"body\").append(\"<div>Could not create user</div>\");\n    }\n  });\n  return form;\n};\n\nexport default newUser;","const form = `\n\n<form>\n<h1>Client Timesheet</h1>\n<div class=\"form-group\">\n  <div class=\"form-group\">\n    <label for=\"jobId\">Job ID</label>\n    <p>Use this to update or delete an exsiting timesheet</p>\n    <input type=\"text\" id=\"jobid\" class=\"form-control\" id=\"jobId\" placeholder=\"Enter Job ID\" name=\"jobId\">\n    \n  </div>\n\n    <label for=\"name\">Staff Attendance</label>\n    <input type=\"text\" id=\"staff\" class=\"form-control\" id=\"name\" placeholder=\"Enter staff names\" name=\"name\">\n    \n  </div>\n\n  <div class=\"form-group\">\n    <label for=\"time\">Time Spent On Site</label>\n    <input type=\"text\" id=\"time\" class=\"form-control\" id=\"time\" placeholder=\"Arrival/Departure Time\" name=\"time\">\n  </div>\n\n  <div class=\"form-group\">\n    <label for=\"notes\">Notes</label>\n    <input type=\"text\" id=\"notes\" class=\"form-control\" id=\"notes\" placeholder=\"Notes From Visit\" name=\"notes\">\n  </div>\n\n  <fieldset class=\"form-group\">\n    <legend class=\"col-form-label\">Was the job fully completed?</legend>\n    <div class=\"form-check form-check-inline\">\n      <input class=\"form-check-input\" type=\"radio\" id=\"completedYes\" name =\"completed\" value=\"true\">\n      <label class=\"form-check-label\" for=\"completedYes\">Yes</label>\n    </div>\n    <div class=\"form-check form-check-inline\">\n      <input class=\"form-check-input\" type=\"radio\" id=\"completedNo\" name =\"completed\" value=\"false\">\n      <label class=\"form-check-label\" for=\"completedNo\">No</label>\n    </div>\n  </fieldset>\n  <div class=\"form-group\">\n    <label for=\"visitId\">Visit Type</label>\n    <select name=\"visitId\" id=\"visit\"></select>\n  </div>\n  <div class=\"form-group\">\n  <button type=\"button\" id=\"create-timesheet\" class=\"btn btn-primary\">Create</button>\n  <button  type=\"button\" id=\"update-timesheet\"  class=\"btn btn-primary\">Update</button>\n  <button  type=\"button\" id=\"delete-timesheet\"  class=\"btn btn-primary\">Delete</button>\n  </form>\n  </div>\n`;\n\nconst timesheetForm = () => {\n  // This logic below gets all categories and loads it in the dropdown\n\n  // Call server using AJAX to get all categories\n  const visitResponse = $.ajax({\n    type: \"GET\",\n    url: \"/api/timesheet/visitId/all\",\n  }).done((visitId) => {\n    let optionsHtml = \"\";\n    /*\n    Iterate over all categories\n    Construct a dynamic <option> tag for each category\n    Append your optionsHtml to the <select> tag with id \"categories\"\n    */\n   visitId.forEach((timesheetEl) => {\n     console.log(\"timesheet el\", timesheetEl);\n      optionsHtml += `<option value=${timesheetEl._id}>${timesheetEl.name}</option>`;\n    });\n\n    $(\"#visit\").append(optionsHtml);\n  });\n\n  // Event listener to for Create Fruit Button\n  $(document).on(\"click\", \"#create-timesheet\", async (e) => {\n    e.preventDefault();\n\n    // Construct body by extracting info from the form\n    const requestBody = {\n      name: $(\"#name\").val(),\n      time: $(\"#time\").val(),\n      notes: $(\"#notes\").val(),\n      completed: $(`input[name=\"completed\"]:checked`).val(),\n      visitId: $(\"#visit\").val(),\n    };\nconsole.log(\"request body: \", requestBody); \n\n$(\"requestbody\").append(requestBody);\n\n\n    //Make a POST request to the server to create a fruit\n    const response = await $.ajax({\n      type: \"POST\",\n      url: \"/api/timesheet/new-timesheet\",\n      contentType: \"application/json\",\n      data: JSON.stringify(requestBody),\n    });\n\n    // Create a pop up alert in the UI to inform the user that fruit was created\n    window.alert(\"Timesheet Created!\");\n  });\n\n  // Event listener to for Update Fruit Button\n  $(document).on(\"click\", \"#update-timesheet\", async (e) => {\n    e.preventDefault();\n\n    // Construct body by extracting info from the form\n    const requestBody = {\n      name: $(\"#name\").val(),\n      time: $(\"#time\").val(),\n      notes: $(\"#notes\").val(),\n      completed: $(`input[name=\"completed\"]:checked`).val(),\n      visitId: $(\"#visit\").val(),\n    };\n\n    // Make a PATCH request to the server to update a fruit\n    const response = await $.ajax({\n      type: \"PATCH\",\n      url: `/api/timesheet/update-timesheet/${$(\"#jobId\").val()}`,\n      contentType: \"application/json\",\n      data: JSON.stringify(requestBody),\n    });\n\n    // Create a pop up alert in the UI to inform the user that fruit was updated\n    window.alert(\"Timesheet Updated!\");\n  });\n\n  // Event listener to for Delete Fruit Button\n  $(document).on(\"click\", \"#delete-timesheet\", async (e) => {\n    e.preventDefault();\n\n    // Make a DELETE request to the server to delete a fruit\n    const response = await $.ajax({\n      type: \"DELETE\",\n      url: `/api/timesheet/delete-timesheet/${$(\"#jobId\").val()}`,\n      contentType: \"application/json\",\n    });\n\n    // Create a pop up alert in the UI to inform the user that fruit was deleted\n    window.alert(\"Timesheet Deleted!\");\n  });\n\n  return form;\n};\n\n\n\nexport default timesheetForm;","import newUser from \"./newUser\";\nimport fruitForm from \"../timesheetForm\";\n\n/*\nI've added a button in this form to allow a first time user to register\nClicking on the Register New User button loads the newUser.js form\n*/\n\nconst form = `\n  <form id=\"login-user\">\n  <h4>Staff Portal Login</h4>\n    <div class=\"form-group\">\n      <label for=\"Staff username\">Username</label>\n      <input type=\"text\" id=\"username\" class=\"form-control\" placeholder=\"Please enter username\" name=\"username\">\n    </div>\n    <div class=\"form-group\">\n      <label for=\"password\">Password</label>\n      <input type=\"password\" id=\"password\" class=\"form-control\" placeholder=\"Please enter password\" name=\"password\">\n    </div>\n    <button id=\"enter\" type=\"submit\" class=\"btn btn-primary\">Submit</button>\n  </form>\n  <button id=\"register-new-user\" class=\"btn btn-primary\">Register</button>\n`;\n\nconst loginUser = () => {\n  $(document).on(\"submit\", \"#login-user\", async (event) => {\n    event.preventDefault();\n\n    // Extract username and password entered\n    const formData = {\n      username: $(\"input[name='username']\").val(),\n      password: $(\"input[name='password']\").val(),\n    };\n\n    // Make a call to validate user name and password\n    try {\n      const response = await $.ajax({\n        type: \"POST\",\n        url: \"/api/users/login\",\n        contentType: \"application/json\",\n        data: JSON.stringify(formData),\n      });\n\n      // Clear current login form as login is successful by calling empty() function\n      $(\"body\").empty();\n\n      // Append the fruit form to the body allowing the user to create/update/delete fruits\n      $(\"body\").append(fruitForm());\n    } catch (err) {\n      // If there's a problem logging in, then add a message to let user know that an invalid combination was provided\n      $(\"body\").append(\"<div>Invalid user/pass provided!</div>\");\n    }\n  });\n  return form;\n};\n\n// Add event listener for Register new user button being clicked\n$(document).on(\"click\", \"#register-new-user\", () => {\n  // Clear current login form\n  $(\"body\").empty();\n\n  // Append new user form instead\n  $(\"body\").append(newUser());\n});\n\nexport default loginUser;","\nimport \"regenerator-runtime/runtime\";\n\nimport loginUser from \"./user/loginUser\";\n\n$(\"body\").append(loginUser());"]}